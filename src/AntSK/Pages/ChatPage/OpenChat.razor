@namespace AntSK.Pages.ChatPage
@using AntSK.Domain.Domain.Model.Dto
@using AntSK.Domain.Repositories
@using AntSK.Models
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using AntSK.Pages.ChatPage.Components
@page "/OpenChat/{AppId}"
@layout OpenLayout

<Card Style="height:100%;overflow: auto;">
    <TitleTemplate>
        <Icon Type="bulb" /> 请选择智能体
        <Select DataSource="@_list"
                @bind-Value="@AppId"
                DefaultValue="@("lucy")"
                ValueProperty="c=>c.Id"
                LabelProperty="c=>c.Name"
                Style="width:170px">
        </Select>
    </TitleTemplate>
    <ChildContent>
        <div style="text-align:center !important">
            <span>技术支持 数智中心</span> &nbsp;&nbsp;
            <Button Type="ButtonType.Link" @onclick="AddFeedBack">
                <Icon Type="mail" Theme="outline" /> 问题反馈
            </Button>

            <Modal Title="问题反馈"
                   Visible="@_fileVisible"
                   OnOk="@FileHandleOk"
                   OnCancel="@FileHandleCancel"
                   ConfirmLoading="@_fileConfirmLoading">
                <span>请输入您的建议，我们将匿名收集您的宝贵意见。</span>
                <br />
                <span>感谢您对数智中心的支持！</span>
                <br />
                <TextArea Placeholder="请输入您的宝贵意见" @bind-Value="@FeedBackMsg" AutoSize="true" OnResize="OnResize" MinRows="5" MaxRows="10" />
                @*<br />
                <Upload Action="@("api/File/UploadFile")"
                        Name="file"
                        Drag
                        Multiple
                         Accept="*/*"
                         BeforeUpload="BeforeUpload"
                         OnSingleCompleted="OnSingleCompleted">
                     <p class="ant-upload-drag-icon">
                         <Icon Type="inbox" />
                     </p>
                     <p class="ant-upload-text">单击或拖动文件到此区域进行上传</p>
                     <p class="ant-upload-hint">
                         请上传问题截图
                     </p>
                 </Upload> *@
            </Modal>
        </div>
    </ChildContent>
    <Body>
        <Watermark Content="天辰问数" style="height: 100%;">
            <ChatView AppId="@AppId" ShowTitle=true>

            </ChatView>
        </Watermark>
    </Body>
    <Extra>
        <span style="text-align:center">内容均由AI生成，仅供参考!</span>
        <a href="/OpenChat/@AppId" target="_blank">全屏窗口</a>
    </Extra>
</Card>
<style>
    #chat {
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        font-family: 'Noto Sans SC', sans-serif;
        margin: 0;
        padding: 10px;
    }

    .ant-card-body {
        padding: 0px 24px 24px 24px
    }
</style>
@code {
    [Parameter]
    public string AppId { get; set; }

    protected List<Apps> _list = new List<Apps>();

    [Inject] protected IApps_Repositories _apps_Repositories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _list = _apps_Repositories.GetList(s => s.IsShow == 1);
        FeedBackMsg = "";
    }

    private void OnResize(OnResizeEventArgs args)
    {
        Console.WriteLine($"OnResizeEvent width:{args.Width},height:{args.Height}");
    }

    bool _fileVisible = false;
    bool _fileConfirmLoading = false;

    private string FeedBackMsg;

    List<FileInfoModel> fileList = new List<FileInfoModel>();

    [Inject] protected MessageService? _message { get; set; }
    [Inject] protected ILogger<FeedBacks> _logger { get; set; }

    private async Task AddFeedBack()
    {
        _fileVisible = true;
    }

    [Inject] IFeedBacks_Repositories _feedBacks_Repositories { get; set; }

    private async Task FileHandleOk(MouseEventArgs e)
    {
        try
        {
            if (string.IsNullOrEmpty(FeedBackMsg))
            {
                _message.Error("请输入您的宝贵意见！");
                return;
            }

            _feedBacks_Repositories.Insert(new FeedBacks() { Id = Guid.NewGuid().ToString(), Content = FeedBackMsg, CreateTime = DateTime.Now });
            // foreach (var file in fileList)
            // {
            //     _funs_Repositories.Insert(new Funs() { Id = Guid.NewGuid().ToString(), Path = file.FilePath });
            //     _functionService.FuncLoad(file.FilePath);
            // }
            // _message.Info(FeedBackMsg);
            _message.Success("反馈成功！感谢支持！");
            _fileVisible = false;
        }
        catch (System.Exception ex)
        {
            _logger.LogError(ex.Message + " ---- " + ex.StackTrace);
        }
    }
    private void FileHandleCancel(MouseEventArgs e)
    {
        _fileVisible = false;
    }

    bool BeforeUpload(UploadFileItem file)
    {
        if (file == null)
        {
            _message.Error("请上传文件!");
        }
        var IsLt500K = file.Size < 1024 * 1024 * 100;
        if (!IsLt500K)
        {
            _message.Error("文件需不大于100MB!");
        }

        return IsLt500K;
    }

    private void OnSingleCompleted(UploadInfo fileinfo)
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            //文件列表
            fileList.Add(new FileInfoModel()
                {
                    FileName = fileinfo.File.FileName,
                    FilePath = fileinfo.File.Url = fileinfo.File.Response
                });
        }
    }
}